#include <iostream>
 
#include <algorithm>
#include <vector>
struct AdjacList { std::vector< std::vector<int> > ribs; inline int n() const { return (int)ribs.size(); } inline AdjacList &clear() { ribs.clear(); return *this; } inline AdjacList &sort() { for(auto b = ribs.begin(), e = ribs.end(); b != e; ++b) std::sort( b->begin(), b->end() ); return *this; } inline std::vector<int> &operator[](int i) { return ribs[i]; } inline std::vector<int> const &operator[](int i) const { return ribs[i]; } AdjacList &scan(FILE *file = stdin); AdjacList &scan_riblist(FILE *file = stdin, bool oriented = false){ int n, m; fscanf(file, "%i%i", &n, &m); ribs.resize(n); int first, second; for(int i = 0; i < m; ++i) { fscanf(file, "%i%i", &first, &second); ribs[first].push_back(second); if(!oriented) ribs[second].push_back(first); } return *this; } AdjacList &scan_riblist1(FILE *file = stdin, bool oriented = false){ int n, m; fscanf(file, "%i%i", &n, &m); ribs.resize(n); int first, second; for(int i = 0; i < m; ++i) { fscanf(file, "%i%i", &first, &second); --first, --second; ribs[first].push_back(second); if(!oriented) ribs[second].push_back(first); } return *this; } void print(FILE *file = stdout) const { fprintf(file, "%i\n", (int)n()); for(auto b = ribs.begin(), e = ribs.end(); b != e; ++b) { fprintf(file, "%i ", (int)b->size()); for(auto bb = b->begin(), ee = b->end(); bb != ee; ++bb) { fprintf(file, "%i ", *bb); } fprintf(file, "\n"); } return; } void print1(FILE *file = stdout) const { fprintf(file, "%i\n", (int)n()); for(auto b = ribs.begin(), e = ribs.end(); b != e; ++b) { fprintf(file, "%i ", (int)b->size()); for(auto bb = b->begin(), ee = b->end(); bb != ee; ++bb) { fprintf(file, "%i ", *bb+1); } fprintf(file, "\n"); } return; } }; using namespace std; char const *INPUT_FILE_NAME = "INPUT.TXT"; char const *OUTPUT_FILE_NAME = "OUTPUT.TXT"; int main( int argc, char *argv[] ) { AdjacList adjl; FILE *file; file = fopen(INPUT_FILE_NAME, "r"); adjl.scan_riblist1(file, true); fclose(file); adjl.sort(); file = fopen(OUTPUT_FILE_NAME, "w"); adjl.print1(file); fclose(file); return 0; } 
