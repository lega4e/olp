#include <iostream>
 
#include <cstring>
 template<typename T> struct AdjacMatrix_template { typedef T value_type; int n; value_type *d; inline AdjacMatrix_template &init() { d = new value_type[n*n]; return *this; } inline AdjacMatrix_template &init(int newn) { n = newn; d = new value_type[n*n]; return *this; } inline AdjacMatrix_template &zeroize() { memset(d, 0, sizeof(value_type)*n*n); return *this; } inline AdjacMatrix_template &free() { delete[] d; return *this; } inline value_type *operator[](int i) { return d + i*n; } inline const value_type *operator[](int i) const { return d + i*n; } inline AdjacMatrix_template &scan(FILE *file = stdin) { fscanf(file, "%i", &n); init(); scannon(file); return *this; } AdjacMatrix_template &scannon(FILE *file = stdin) { int input; for(auto *b = d, *e = d+n*n; b != e; ++b) fscanf(file, "%i", &input), *b = input; return *this; } AdjacMatrix_template &scan_riblist(FILE *file = stdin, bool oriented = false) { int m; fscanf(file, "%i%i", &n, &m); init(); zeroize(); int first, second; for(int i = 0; i < m; ++i) { fscanf(file, "%i%i", &first, &second); d[ n*first + second ] = 1; if(!oriented) d[ n*second + first ] = 1; } return *this; } AdjacMatrix_template &scan_riblist1(FILE *file = stdin, bool oriented = false) { int m; fscanf(file, "%i%i", &n, &m); init(); zeroize(); int first, second; for(int i = 0; i < m; ++i) { fscanf(file, "%i%i", &first, &second); --first, --second; d[ n*first + second ] = 1; if(!oriented) d[ n*second + first ] = 1; } return *this; } void print(FILE *file = stdout) const { fprintf(file, "%i\n", n); for(int i = 0; i < n; ++i) { for(int j = 0; j < n; ++j) { fprintf(file, "%i ", (int)d[i*n + j]); } fprintf(file, "\n"); } return; } }; typedef AdjacMatrix_template<char> AdjacMatrix; typedef AdjacMatrix_template<char> AdjacMatrixC; typedef AdjacMatrix_template<int> AdjacMatrixI; typedef AdjacMatrix_template<long long> AdjacMatrixLL; typedef AdjacMatrix_template<float> AdjacMatrixF; typedef AdjacMatrix_template<double> AdjacMatrixD; typedef AdjacMatrix_template<long double> AdjacMatrixLD; using namespace std; char const *INPUT_FILE_NAME = "INPUT.TXT"; char const *OUTPUT_FILE_NAME = "OUTPUT.TXT"; int main( int argc, char *argv[] ) { AdjacMatrixI adjm; { auto file = fopen(INPUT_FILE_NAME, "r"); adjm.scan(file); fclose(file); } for(int k = 0; k < adjm.n; ++k) for(int i = 0; i < adjm.n; ++i) for(int j = 0; j < adjm.n; ++j) adjm[i][j] = min(adjm[i][j], adjm[i][k] + adjm[k][j]); { auto file = fopen(OUTPUT_FILE_NAME, "w"); for(int y = 0; y < adjm.n; ++y) { for(int x = 0; x < adjm.n; ++x) fprintf(file, "%i ", adjm[y][x]); fprintf(file, "\n"); } fclose(file); } return 0; } 
