#include <iostream>
#include <stack>
 
#include <algorithm>
#include <vector>
 struct AdjacList { std::vector< std::vector<int> > ribs; inline int n() const { return (int)ribs.size(); } inline AdjacList &clear() { ribs.clear(); return *this; } inline AdjacList &sort() { for(auto b = ribs.begin(), e = ribs.end(); b != e; ++b) std::sort( b->begin(), b->end() ); return *this; } inline std::vector<int> &operator[](int i) { return ribs[i]; } inline std::vector<int> const &operator[](int i) const { return ribs[i]; } AdjacList &scan(FILE *file = stdin) { int n; fscanf(file, "%i", &n); ribs.resize(n); int m; for(auto b = ribs.begin(), e = ribs.end(); b != e; ++b) { fscanf(file, "%i", &m); b->resize(m); for(auto bb = b->begin(), ee = b->end(); bb != ee; ++bb) fscanf(file, "%i", bb.base()); } return *this; } AdjacList &scan1(FILE *file = stdin) { int n; fscanf(file, "%i", &n); ribs.resize(n); int m; for(auto b = ribs.begin(), e = ribs.end(); b != e; ++b) { fscanf(file, "%i", &m); b->resize(m); for(auto bb = b->begin(), ee = b->end(); bb != ee; ++bb) fscanf(file, "%i", bb.base()), --*bb; } return *this; } AdjacList &scan_matrix(FILE *file = stdin) { int n; fscanf(file, "%i", &n); ribs.resize(n); int input; for(int i = 0; i < n; ++i) for(int j = 0; j < n; ++j) { fscanf(file, "%i", &input); if(input) ribs[i].push_back(j); } return *this; } AdjacList &scan_riblist(FILE *file = stdin, bool oriented = false){ int n, m; fscanf(file, "%i%i", &n, &m); ribs.resize(n); int first, second; for(int i = 0; i < m; ++i) { fscanf(file, "%i%i", &first, &second); ribs[first].push_back(second); if(!oriented) ribs[second].push_back(first); } return *this; } AdjacList &scan_riblist1(FILE *file = stdin, bool oriented = false){ int n, m; fscanf(file, "%i%i", &n, &m); ribs.resize(n); int first, second; for(int i = 0; i < m; ++i) { fscanf(file, "%i%i", &first, &second); --first, --second; ribs[first].push_back(second); if(!oriented) ribs[second].push_back(first); } return *this; } void print(FILE *file = stdout) const { fprintf(file, "%i\n", (int)n()); for(auto b = ribs.begin(), e = ribs.end(); b != e; ++b) { fprintf(file, "%i ", (int)b->size()); for(auto bb = b->begin(), ee = b->end(); bb != ee; ++bb) { fprintf(file, "%i ", *bb); } fprintf(file, "\n"); } return; } void print1(FILE *file = stdout) const { fprintf(file, "%i\n", (int)n()); for(auto b = ribs.begin(), e = ribs.end(); b != e; ++b) { fprintf(file, "%i ", (int)b->size()); for(auto bb = b->begin(), ee = b->end(); bb != ee; ++bb) { fprintf(file, "%i ", *bb+1); } fprintf(file, "\n"); } return; } }; using namespace std; char const *INPUT_FILE_NAME = "INPUT.TXT"; char const *OUTPUT_FILE_NAME = "OUTPUT.TXT"; int main( int argc, char *argv[] ) { AdjacList adjl; { auto file = fopen(INPUT_FILE_NAME, "r"); adjl.scan_riblist1(file, true); fclose(file); } bool res = true; vector<int> marks(adjl.n(), 0); stack<int> vers; marks[0] = 1; vers.push(0); int it = 1; int v; again: while(!vers.empty()) { v = vers.top(); if(v < 0) { v = -(v+1); marks[v] = 1; vers.pop(); continue; } vers.top() = -(v+1); marks[v] = 2; for(auto b = adjl[v].begin(), e = adjl[v].end(); b != e; ++b) { if(marks[*b] == 1) continue; if(marks[*b] == 2) { res = false; goto output_label; } marks[*b] = 1; vers.push(*b); } } for(; it < (int)marks.size(); ++it) { if(marks[it] == 2) throw 1; if(!marks[it]) { marks[it] = true; vers.push(it); goto again; } } output_label: { auto file = fopen(OUTPUT_FILE_NAME, "w"); res ? fprintf(file, "Yes\n") : fprintf(file, "No\n"); fclose(file); } return 0; } 
